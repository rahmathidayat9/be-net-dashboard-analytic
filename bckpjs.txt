const express = require('express');
const http = require('http');
const morgan = require('morgan');
const fs = require('fs');
const path = require('path');
const cors = require('cors');
const apiRouter = require('./routes/api');
const { Server } = require('socket.io');
const cron = require('node-cron');
// const snmp = require('net-snmp');
require('dotenv').config();

const PORT = process.env.PORT || 3000;

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: '*',
  },
});

const accessLogStream = fs.createWriteStream(path.join(__dirname, 'storage/access.log'), { flags: 'a' });
app.use(morgan('combined', { stream: accessLogStream }));
app.use(cors({ origin: true }));
app.use(express.json());

app.use(apiRouter);

function getRandomNumber(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Create a single SNMP session for the entire application
// const snmpSession = snmp.createSession('103.224.19.18', 'analytictrimitra_test');

io.on('connection', async (socket) => {
  cron.schedule('* * * * * *', () => {
    socket.emit('ether1', {
      download: getRandomNumber(50, 900),
      upload: getRandomNumber(50, 900),
    });
  });
    // socket.emit('ether1', {
    //   download: 100,
    //   upload: 200,
    // });
    /*
    const oids = [
      '1.3.6.1.2.1.31.1.1.1.6.1', // bytes-in (Download)
      '1.3.6.1.2.1.31.1.1.1.10.1'  // bytes-out (Upload)
    ];

    snmpSession.get(oids, function (error, varbinds) {
      if (error) {
        console.error(error);
      } else {
        let upload, download;

        for (let i = 0; i < varbinds.length; i++) {
          if (snmp.isVarbindError(varbinds[i])) {
            console.error(snmp.varbindError(varbinds[i]));
          } else {
            const oid = varbinds[i].oid;
            const value = varbinds[i].value;

            if (oid === '1.3.6.1.2.1.31.1.1.1.6.1') { // bytes-in (Download)
              download = value.readUIntBE(0, value.length);
            } else if (oid === '1.3.6.1.2.1.31.1.1.1.10.1') { // bytes-out (Upload)
              upload = value.readUIntBE(0, value.length);
            } else {
              console.log(oid + ' = ' + value);
            }
          }
        }

        // Emit data to the socket after processing SNMP data
        socket.emit('ether1', {
          download: download,
          upload: upload,
        });
      }
    });
    */
  // });

  socket.on('disconnect', () => {
    console.log('user disconnected');
  });
});

server.listen(PORT, () => {
  console.log(`Listening on *:${PORT}`);
});
